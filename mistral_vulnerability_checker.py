import os
import textwrap
from mistralai.client import MistralClient
from dotenv import load_dotenv

# Load API key from .env
load_dotenv()
api_key = os.getenv("MISTRAL_API_KEY")

# Initialize Mistral client
client = MistralClient(api_key=api_key)

# Vulnerability analysis function
def analyze_solidity_code(code: str) -> str:
    prompt = textwrap.dedent(f"""
        ### Solidity Smart Contract Vulnerability Detection ###

        You are an expert in smart contract security. Given the Solidity code below, identify any vulnerabilities, explain why they are dangerous, and suggest a fix.

        Code:
        <solidity>
        {code}
        </solidity>

        Respond in this format:

        1. Vulnerability Description:
        2. Code Snippet / Line:
        3. Why it's dangerous:
        4. Fix / Recommendation:

        If no vulnerabilities are found, respond: "No critical vulnerabilities found."
    """)

    response = client.chat(
        model="mistral-small",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
    )

    return response.choices[0].message.content  # âœ… fixed

# Test block
if __name__ == "__main__":
    test_code = """
    pragma solidity ^0.8.0;

    contract Wallet {
        address public owner;

        constructor() {
            owner = msg.sender;
        }

        function withdraw() public {
            payable(msg.sender).transfer(address(this).balance);
        }

        receive() external payable {}
    }
    """
    result = analyze_solidity_code(test_code)
    print("\n--- Mistral Vulnerability Report ---\n")
    print(result)
